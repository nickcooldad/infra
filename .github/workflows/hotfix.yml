name: Hotfix

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version to fix"
        required: true
        type: string

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/${{ inputs.release_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

  hotfix:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releases/${{ inputs.release_version }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ inputs.release_version }}_fix${{ github.run_number }}
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ inputs.release_version }}_latest

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag v${{ inputs.release_version }}_fix${{ github.run_number }}
          git push origin v${{ inputs.release_version }}_fix${{ github.run_number }}

      - name: Get commit list
        id: commits
        run: |
          # Получаем предыдущий тег для этого релиза
          PREV_TAG=$(git describe --tags --match="v${{ inputs.release_version }}*" --abbrev=0 HEAD~1 2>/dev/null || git describe --tags --match="v${{ inputs.release_version }}" --abbrev=0 2>/dev/null)
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add comment to release issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const commits = `${{ steps.commits.outputs.commits }}`;

            // Находим issue для релиза
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release',
              state: 'open'
            });

            const releaseIssue = issues.data.find(issue => 
              issue.title.includes(`v${{ inputs.release_version }}`)
            );

            if (releaseIssue) {
              const commentBody = `
              ## Фикс для релиза ${{ inputs.release_version }}
              
              **Дата фикса:** ${date}
              **Автор фикса:** ${{ github.actor }}
              
              ### Список коммитов:
              ${commits}
              
              ### Docker образ:
              \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ inputs.release_version }}_fix${{ github.run_number }}\`
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: releaseIssue.number,
                body: commentBody
              });
            }
